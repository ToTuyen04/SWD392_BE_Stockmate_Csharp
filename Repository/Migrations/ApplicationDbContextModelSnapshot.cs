// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Repository.Models.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category_code");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryCode")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.ExchangeNote", b =>
                {
                    b.Property<string>("ExchangeNoteId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("exchangeNote_id");

                    b.Property<string>("ApprovedByUserCode")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("CreatedByUserCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("DestinationWarehouseCode")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("SourceWarehouseCode")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("transaction_type");

                    b.HasKey("ExchangeNoteId");

                    b.HasIndex("ApprovedByUserCode");

                    b.HasIndex("CreatedByUserCode");

                    b.HasIndex("DestinationWarehouseCode");

                    b.HasIndex("SourceWarehouseCode");

                    b.ToTable("ExchangeNote", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.InvalidatedToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("InvalidatedToken", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.NoteItem", b =>
                {
                    b.Property<string>("NoteItemId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("noteItem_id");

                    b.Property<string>("ExchangeNoteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NoteItemCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("noteItem_code");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("NoteItemId");

                    b.HasIndex("ExchangeNoteId");

                    b.HasIndex("NoteItemCode")
                        .IsUnique();

                    b.HasIndex("ProductCode");

                    b.ToTable("NoteItem", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("color");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCode")
                        .IsUnique();

                    b.HasIndex("ProductTypeCode");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.ProductType", b =>
                {
                    b.Property<string>("ProductTypeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("productType_id");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("productType_code");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("productType_name");

                    b.HasKey("ProductTypeId");

                    b.HasIndex("CategoryCode");

                    b.HasIndex("ProductTypeCode")
                        .IsUnique();

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role_name");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role_type");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.StockCheckNote", b =>
                {
                    b.Property<string>("StockCheckNoteId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stockCheckNote_id");

                    b.Property<string>("CheckerUserCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("StockCheckStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.HasKey("StockCheckNoteId");

                    b.HasIndex("CheckerUserCode");

                    b.HasIndex("WarehouseCode");

                    b.ToTable("StockCheckNote", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.StockCheckProduct", b =>
                {
                    b.Property<string>("StockCheckProductId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stockCheckProduct_id");

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int")
                        .HasColumnName("actual_quantity");

                    b.Property<int>("ExpectedQuantity")
                        .HasColumnType("int")
                        .HasColumnName("expected_quantity");

                    b.Property<int>("LastQuantity")
                        .HasColumnType("int")
                        .HasColumnName("last_quantity");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("StockCheckNoteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StockCheckProductStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("stockCheckProduct_status");

                    b.Property<int>("TotalExportQuantity")
                        .HasColumnType("int")
                        .HasColumnName("total_export_quantity");

                    b.Property<int>("TotalImportQuantity")
                        .HasColumnType("int")
                        .HasColumnName("total_import_quantity");

                    b.HasKey("StockCheckProductId");

                    b.HasIndex("ProductCode");

                    b.HasIndex("StockCheckNoteId");

                    b.ToTable("StockCheckProduct", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("user_code");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<string>("WarehouseCode")
                        .HasColumnType("varchar(6)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCode")
                        .IsUnique();

                    b.HasIndex("WarehouseCode");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.Warehouse", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("warehouse_code");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("warehouse_name");

                    b.HasKey("WarehouseId");

                    b.HasIndex("WarehouseCode")
                        .IsUnique();

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Entities.ExchangeNote", b =>
                {
                    b.HasOne("Repository.Models.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserCode")
                        .HasPrincipalKey("UserCode");

                    b.HasOne("Repository.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Entities.Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseCode")
                        .HasPrincipalKey("WarehouseCode");

                    b.HasOne("Repository.Models.Entities.Warehouse", "SourceWarehouse")
                        .WithMany()
                        .HasForeignKey("SourceWarehouseCode")
                        .HasPrincipalKey("WarehouseCode");

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("SourceWarehouse");
                });

            modelBuilder.Entity("Repository.Models.Entities.NoteItem", b =>
                {
                    b.HasOne("Repository.Models.Entities.ExchangeNote", "ExchangeNote")
                        .WithMany("NoteItems")
                        .HasForeignKey("ExchangeNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductCode")
                        .HasPrincipalKey("ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeNote");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Models.Entities.Product", b =>
                {
                    b.HasOne("Repository.Models.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeCode")
                        .HasPrincipalKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Repository.Models.Entities.ProductType", b =>
                {
                    b.HasOne("Repository.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryCode")
                        .HasPrincipalKey("CategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Repository.Models.Entities.StockCheckNote", b =>
                {
                    b.HasOne("Repository.Models.Entities.User", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerUserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseCode")
                        .HasPrincipalKey("WarehouseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checker");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Repository.Models.Entities.StockCheckProduct", b =>
                {
                    b.HasOne("Repository.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductCode")
                        .HasPrincipalKey("ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Entities.StockCheckNote", "StockCheckNote")
                        .WithMany("StockCheckProducts")
                        .HasForeignKey("StockCheckNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockCheckNote");
                });

            modelBuilder.Entity("Repository.Models.Entities.User", b =>
                {
                    b.HasOne("Repository.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseCode")
                        .HasPrincipalKey("WarehouseCode");

                    b.Navigation("Role");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Repository.Models.Entities.ExchangeNote", b =>
                {
                    b.Navigation("NoteItems");
                });

            modelBuilder.Entity("Repository.Models.Entities.StockCheckNote", b =>
                {
                    b.Navigation("StockCheckProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
